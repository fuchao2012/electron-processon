// Sets up the parser generated by canopy to use the
// [Node](./javascript/node.html) subclasses in the generated tree. This is all
// a bit of a hack that is dependent on how canopy creates nodes in its parse
// tree.
const parser = require('./grammar.peg');
const Node = require('./node');
const Root = require('./root');
const Regexp = require('./regexp');
const Match = require('./match');
const MatchFragment = require('./match_fragment');
const Anchor = require('./anchor');
const Subexp = require('./subexp');
const Charset = require('./charset');
const CharsetEscape = require('./charset_escape');
const CharsetRange = require('./charset_range');
const Literal = require('./literal');
const Escape = require('./escape');
const AnyCharacter = require('./any_character');
const Repeat = require('./repeat');
const RepeatAny = require('./repeat_any');
const RepeatOptional = require('./repeat_optional');
const RepeatRequired = require('./repeat_required');
const RepeatSpec = require('./repeat_spec');

// Canopy creates an instance of SyntaxNode for each element in the tree, then
// adds any necessary fields to that instance. In this case, we're replacing
// the default class with the Node class.
parser.Parser.SyntaxNode      = Node;

// Once the SyntaxNode instance is created, the specific node type object is
// overlayed onto it. This causes the module attribute on the Node to be set,
// which updates the Node instance into the more specific "subclass" that is
// used for rendering.
parser.Parser.Root            = { module: Root };
parser.Parser.Regexp          = { module: Regexp };
parser.Parser.Match           = { module: Match };
parser.Parser.MatchFragment   = { module: MatchFragment };
parser.Parser.Anchor          = { module: Anchor };
parser.Parser.Subexp          = { module: Subexp };
parser.Parser.Charset         = { module: Charset };
parser.Parser.CharsetEscape   = { module: CharsetEscape };
parser.Parser.CharsetRange    = { module: CharsetRange };
parser.Parser.Literal         = { module: Literal };
parser.Parser.Escape          = { module: Escape };
parser.Parser.AnyCharacter    = { module: AnyCharacter };
parser.Parser.Repeat          = { module: Repeat };
parser.Parser.RepeatAny       = { module: RepeatAny };
parser.Parser.RepeatOptional  = { module: RepeatOptional };
parser.Parser.RepeatRequired  = { module: RepeatRequired };
parser.Parser.RepeatSpec      = { module: RepeatSpec };

export default parser;
